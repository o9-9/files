#!/usr/bin/env python3
"""
Auto-group GitHub starred repos into human-friendly lists.

Usage:
  1) Ensure you have stars.json exported by the scripts above.
  2) python3 group_stars.py
Outputs:
  - star_groups.md     : Markdown with categorized lists (first items for each list)
  - star_groups.json   : JSON mapping group -> [repos]
"""

from pathlib import Path
import json
import re

IN = Path("stars.json")
OUT_MD = Path("star_groups.md")
OUT_JSON = Path("star_groups.json")

if not IN.exists():
    print("stars.json not found. Run the export script first.")
    raise SystemExit(1)

data = json.loads(IN.read_text())

# Category definitions: name, short_description, list of matching regex keywords (lowercase)
CATEGORIES = [
    ("✨ Favorites — Go-to tools & libs", "Daily drivers and libraries I rely on.", [
        r"\bcli\b", r"\btool\b", r"\blib\b", r"\butilities?\b", r"\bcore\b", r"\bframework\b"
    ]),
    ("📚 Learning — Tutorials & Guides", "Tutorials, guides, and learning resources.", [
        r"\btutorial\b", r"\bguide\b", r"\bhow to\b", r"\blearn\b", r"\bworkshop\b", r"\bcourse\b"
    ]),
    ("🎨 UI Components — Design systems & React", "Reusable UI components and design systems.", [
        r"\breact\b", r"\bcomponent\b", r"\bui\b", r"\bdesign system\b", r"\bstorybook\b"
    ]),
    ("🔧 Dev Tools — CLIs, helpers, extensions", "Developer tooling: CLIs, linters, formatters.", [
        r"\bcli\b", r"\blinter\b", r"\bformatter\b", r"\bplugin\b", r"\btooling\b"
    ]),
    ("⚙️ DevOps — CI/CD, infra, containers", "Infrastructure, automation, CI/CD and containers.", [
        r"\bci\b", r"\bcd\b", r"\bworkflow\b", r"\bjenkins\b", r"\bgithub action\b", r"\bdocker\b", r"\bkubernetes\b"
    ]),
    ("🧠 ML & Data — Models, notebooks, datasets", "Machine learning libs, datasets, notebooks.", [
        r"\bmachine learning\b", r"\bml\b", r"\bnotebook\b", r"\bdata\b", r"\btensorflow\b", r"\bscikit\b", r"\bpytorch\b"
    ]),
    ("📦 Starters & Boilerplates — Templates & scaffolds", "Starter projects and boilerplates to scaffold new work.", [
        r"\btemplate\b", r"\bboilerplate\b", r"\bstarter\b", r"\bscaffold\b"
    ]),
    ("🛠️ Utilities & Snippets — Tiny helpful libs", "Small utilities and convenient snippets.", [
        r"\butili?ty\b", r"\bsnippet\b", r"\bhelper\b", r"\bmicro\b"
    ]),
    ("🔐 Security & Privacy — Audits & tools", "Security tooling, scanners, privacy resources.", [
        r"\bsecurity\b", r"\bvulnerability\b", r"\bcrypto\b", r"\bprivacy\b", r"\bscan\b", r"\baudit\b"
    ]),
    ("💡 Inspiration — Demos & creative projects", "Inspiring demos and creative examples.", [
        r"\bdemo\b", r"\bexample\b", r"\binspiration\b", r"\bshowcase\b"
    ]),
    ("📝 Articles & Essays — Long reads, explainers", "Essays, long-form explainers and reference articles.", [
        r"\barticle\b", r"\bessay\b", r"\bexplainer\b", r"\breadme\b", r"\bpost\b"
    ]),
    ("🔬 Experiments — Playgrounds & prototypes", "Proof-of-concepts and prototypes to experiment with.", [
        r"\bexperiment\b", r"\bprototype\b", r"\bplayground\b", r"\btoy\b"
    ]),
]

# lowercased searchable strings per repo
def searchable(repo):
    parts = []
    parts.append(repo.get("name","") or "")
    parts.append(repo.get("full_name","") or "")
    parts.append(repo.get("description") or "")
    parts += repo.get("topics", []) or []
    if repo.get("language"):
        parts.append(repo["language"])
    return " ".join(parts).lower()

# initialize groups
groups = {name: [] for (name, _, _) in CATEGORIES}
groups["📁 Misc — Uncategorized"] = []

# assign repos
for repo in data:
    text = searchable(repo)
    assigned = False
    for name, _, patterns in CATEGORIES:
        for pat in patterns:
            if re.search(pat, text, flags=re.I):
                groups[name].append(repo)
                assigned = True
                break
        if assigned:
            break
    if not assigned:
        groups["📁 Misc — Uncategorized"].append(repo)

# sort each group by stargazers_count desc
for k in groups:
    groups[k].sort(key=lambda r: r.get("stargazers_count", 0), reverse=True)

# write JSON mapping (compact)
OUT_JSON.write_text(json.dumps({k: [{"full_name": r["full_name"], "html_url": r["html_url"], "description": r.get("description"), "language": r.get("language"), "stargazers": r.get("stargazers_count",0)} for r in v] for k,v in groups.items()}, indent=2))

# write markdown with a short description header for each group and first 12 items
lines = []
lines.append("# Auto-grouped Starred Repos")
lines.append("")
lines.append("This file was generated by group_stars.py — each section is a suggested Stars list (name + short description) and the top items from your starred repos that match the category.")
lines.append("")

# Short descriptions mapping for header (from CATEGORIES)
short_desc_map = {name: desc for (name, desc, _) in CATEGORIES}
short_desc_map["📁 Misc — Uncategorized"] = "Leftovers that didn't match any heuristic."

for name in groups:
    desc = short_desc_map.get(name, "")
    lines.append(f"## {name}")
    if desc:
        lines.append(f"{desc}")
    lines.append("")
    items = groups[name]
    if not items:
        lines.append("_No items matched this category._")
    else:
        for r in items[:12]:
            desc = (r.get("description") or "").replace("\n"," ").strip()
            lang = r.get("language") or ""
            stars = r.get("stargazers_count", 0)
            lines.append(f"- [{r['full_name']}]({r['html_url']}) — {desc} {('• ' + lang) if lang else ''} {('• ' + str(stars) + '★') if stars else ''}".strip())
    lines.append("")

OUT_MD.write_text("\n".join(lines))
print(f"Wrote: {OUT_MD} and {OUT_JSON}")
print("Open star_groups.md to review list names, descriptions and first items.")